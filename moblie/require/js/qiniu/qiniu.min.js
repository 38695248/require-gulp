 function FileProgress(file, targetID) { this.fileProgressID = file.id; this.file = file; this.opacity = 100; this.height = 0; this.fileProgressWrapper = $('#' + this.fileProgressID); if (!this.fileProgressWrapper.length) { this.fileProgressWrapper = $('<tr></tr>'); var Wrappeer = this.fileProgressWrapper; Wrappeer.attr('id', this.fileProgressID).addClass('progressContainer'); var progressText = $("<td/>"); progressText.addClass('progressName').text(file.name); var fileSize = plupload.formatSize(file.size).toUpperCase(); var progressSize = $("<td/>"); progressSize.addClass("progressFileSize").text(fileSize); var progressBarTd = $("<td/>"); var progressBarBox = $("<div/>"); progressBarBox.addClass('info'); var progressBarWrapper = $("<div/>"); progressBarWrapper.addClass("progress progress-striped"); var progressBar = $("<div/>"); progressBar.addClass("progress-bar progress-bar-info") .attr('role', 'progressbar') .attr('aria-valuemax', 100) .attr('aria-valuenow', 0) .attr('aria-valuein', 0) .width('0%'); var progressBarPercent = $('<span class=sr-only />'); progressBarPercent.text(fileSize); var progressCancel = $('<a href=# />'); progressCancel.hide().addClass('progressCancel').text(''); progressBar.append(progressBarPercent); progressBarWrapper.append(progressBar); progressBarBox.append(progressBarWrapper); progressBarBox.append(progressCancel); var progressBarStatus = $('<div class="status text-center"/>'); progressBarBox.append(progressBarStatus); progressBarTd.append(progressBarBox); Wrappeer.append(progressText); Wrappeer.append(progressSize); Wrappeer.append(progressBarTd); $('#' + targetID).append(Wrappeer); } else { this.reset(); } this.height = this.fileProgressWrapper.offset().top; this.setTimer(null); } FileProgress.prototype.setTimer = function(timer) { this.fileProgressWrapper.FP_TIMER = timer; }; FileProgress.prototype.getTimer = function(timer) { return this.fileProgressWrapper.FP_TIMER || null; }; FileProgress.prototype.reset = function() { this.fileProgressWrapper.attr('class', "progressContainer"); this.fileProgressWrapper.find('td .progress .progress-bar-info').attr('aria-valuenow', 0).width('0%').find('span').text(''); this.appear(); }; FileProgress.prototype.setChunkProgess = function(chunk_size) { var chunk_amount = Math.ceil(this.file.size / chunk_size); if (chunk_amount === 1) { return false; } var viewProgess = $('<button class="btn btn-default">查看分块上传进度</button>'); var progressBarChunkTr = $('<tr class="chunk-status-tr"><td colspan=3></td></tr>'); var progressBarChunk = $('<div/>'); for (var i = 1; i <= chunk_amount; i++) { var col = $('<div class="col-md-2"/>'); var progressBarWrapper = $('<div class="progress progress-striped"></div'); var progressBar = $("<div/>"); progressBar.addClass("progress-bar progress-bar-info text-left") .attr('role', 'progressbar') .attr('aria-valuemax', 100) .attr('aria-valuenow', 0) .attr('aria-valuein', 0) .width('0%') .attr('id', this.file.id + '_' + i) .text(''); var progressBarStatus = $('<span/>'); progressBarStatus.addClass('chunk-status').text(); progressBarWrapper.append(progressBar); progressBarWrapper.append(progressBarStatus); col.append(progressBarWrapper); progressBarChunk.append(col); } this.fileProgressWrapper.find('td>div').append(viewProgess); progressBarChunkTr.hide().find('td').append(progressBarChunk); progressBarChunkTr.insertAfter(this.fileProgressWrapper); }; FileProgress.prototype.setProgress = function(percentage, speed, chunk_size) { this.fileProgressWrapper.attr('class', "progressContainer green"); var file = this.file; var uploaded = file.loaded; var size = plupload.formatSize(uploaded).toUpperCase(); var formatSpeed = plupload.formatSize(speed).toUpperCase(); var progressbar = this.fileProgressWrapper.find('td .progress').find('.progress-bar-info'); this.fileProgressWrapper.find('.status').text("已上传: " + size + " 上传速度： " + formatSpeed + "/s"); percentage = parseInt(percentage, 10); if (file.status !== plupload.DONE && percentage === 100) { percentage = 99; } progressbar.attr('aria-valuenow', percentage).css('width', percentage + '%'); if (chunk_size) { var chunk_amount = Math.ceil(file.size / chunk_size); if (chunk_amount === 1) { return false; } var current_uploading_chunk = Math.ceil(uploaded / chunk_size); var pre_chunk, text; for (var index = 0; index < current_uploading_chunk; index++) { pre_chunk = $('#' + file.id + "_" + index); pre_chunk.width('100%').removeClass().addClass('alert-success').attr('aria-valuenow', 100); text = "块" + index + "上传进度100%"; pre_chunk.next().html(text); } var currentProgessBar = $('#' + file.id + "_" + current_uploading_chunk); var current_chunk_percent; if (current_uploading_chunk < chunk_amount) { if (uploaded % chunk_size) { current_chunk_percent = ((uploaded % chunk_size) / chunk_size * 100).toFixed(2); } else { current_chunk_percent = 100; currentProgessBar.removeClass().addClass('alert-success'); } } else { var last_chunk_size = file.size - chunk_size * (chunk_amount - 1); var left_file_size = file.size - uploaded; if (left_file_size % last_chunk_size) { current_chunk_percent = ((uploaded % chunk_size) / last_chunk_size * 100).toFixed(2); } else { current_chunk_percent = 100; currentProgessBar.removeClass().addClass('alert-success'); } } currentProgessBar.width(current_chunk_percent + '%'); currentProgessBar.attr('aria-valuenow', current_chunk_percent); text = "块" + current_uploading_chunk + "上传进度" + current_chunk_percent + '%'; currentProgessBar.next().html(text); } this.appear(); }; FileProgress.prototype.setComplete = function(up, info) { var td = this.fileProgressWrapper.find('td:eq(2) .progress'); var res = $.parseJSON(info); var url; if (res.url) { url = res.url; str = "<div><strong>Link:</strong><a href=" + res.url + " target='_blank' > " + res.url + "</a></div>" + "<div class=hash><strong>Hash:</strong>" + res.hash + "</div>"; } else { var domain = up.getOption('domain'); url = domain + encodeURI(res.key); var link = domain + res.key; str = "<div><strong>Link:</strong><a href=" + url + " target='_blank' > " + link + "</a></div>" + "<div class=hash><strong>Hash:</strong>" + res.hash + "</div>"; } td.html(str).removeClass().next().next('.status').hide(); var progressNameTd = this.fileProgressWrapper.find('.progressName'); var imageView = '?imageView2/1/w/100/h/100'; var isImage = function(url) { var res, suffix = ""; var imageSuffixes = ["png", "jpg", "jpeg", "gif", "bmp"]; var suffixMatch = /\.([a-zA-Z0-9]+)(\?|\@|$)/; if (!url || !suffixMatch.test(url)) { return false; } res = suffixMatch.exec(url); suffix = res[1].toLowerCase(); for (var i = 0, l = imageSuffixes.length; i < l; i++) { if (suffix === imageSuffixes[i]) { return true; } } return false; }; var isImg = isImage(url); var Wrapper = $('<div class="Wrapper"/>'); var imgWrapper = $('<div class="imgWrapper col-md-3"/>'); var linkWrapper = $('<a class="linkWrapper" target="_blank"/>'); var showImg = $('<img src="loading.gif"/>'); progressNameTd.append(Wrapper); if (!isImg) { showImg.attr('src', 'default.png'); Wrapper.addClass('default'); imgWrapper.append(showImg); Wrapper.append(imgWrapper); } else { linkWrapper.append(showImg); imgWrapper.append(linkWrapper); Wrapper.append(imgWrapper); var img = new Image(); if (!/imageView/.test(url)) { url += imageView } $(img).attr('src', url); var height_space = 340; $(img).on('load', function() { showImg.attr('src', url); linkWrapper.attr('href', url).attr('title', '查看原图'); function initImg(url, key, height) { $('#myModal-img').modal(); var modalBody = $('#myModal-img').find('.modal-body'); if (height <= 300) { $('#myModal-img').find('.text-warning').show(); } var newImg = new Image(); modalBody.find('img').attr('src', 'loading.gif'); newImg.onload = function() { modalBody.find('img').attr('src', url).data('key', key).data('h', height); modalBody.find('.modal-body-wrapper').find('a').attr('href', url); }; newImg.src = url; } var infoWrapper = $('<div class="infoWrapper col-md-6"></div>'); var fopLink = $('<a class="fopLink"/>'); fopLink.attr('data-key', res.key).text('查看处理效果'); infoWrapper.append(fopLink); fopLink.on('click', function() { var key = $(this).data('key'); var height = parseInt($(this).parents('.Wrapper').find('.origin-height').text(), 10); if (height > $(window).height() - height_space) { height = parseInt($(window).height() - height_space, 10); } else { height = parseInt(height, 10) || 300; } var fopArr = []; fopArr.push({ fop: 'imageView2', mode: 3, h: height, q: 100, format: 'png' }); fopArr.push({ fop: 'watermark', mode: 1, image: 'http://www.b1.qiniudn.com/images/logo-2.png', dissolve: 100, gravity: 'SouthEast', dx: 100, dy: 100 }); var url = Qiniu.pipeline(fopArr, key); $('#myModal-img').on('hide.bs.modal', function() { $('#myModal-img').find('.btn-default').removeClass('disabled'); $('#myModal-img').find('.text-warning').hide(); }).on('show.bs.modal', function() { $('#myModal-img').find('.imageView').find('a:eq(0)').addClass('disabled'); $('#myModal-img').find('.watermark').find('a:eq(3)').addClass('disabled'); $('#myModal-img').find('.text-warning').hide(); }); initImg(url, key, height); return false; }); var ie = Qiniu.detectIEVersion(); if (!(ie && ie <= 9)) { var exif = Qiniu.exif(res.key); if (exif) { var exifLink = $('<a href="" target="_blank">查看exif</a>'); exifLink.attr('href', url + '?exif'); infoWrapper.append(exifLink); } var imageInfo = Qiniu.imageInfo(res.key); var infoArea = $('<div/>'); var infoInner = '<div>格式：<span class="origin-format">' + imageInfo.format + '</span></div>' + '<div>宽度：<span class="orgin-width">' + imageInfo.width + 'px</span></div>' + '<div>高度：<span class="origin-height">' + imageInfo.height + 'px</span></div>'; infoArea.html(infoInner); infoWrapper.append(infoArea); } Wrapper.append(infoWrapper); }).on('error', function() { showImg.attr('src', 'default.png'); Wrapper.addClass('default'); }); } }; FileProgress.prototype.setError = function() { this.fileProgressWrapper.find('td:eq(2)').attr('class', 'text-warning'); this.fileProgressWrapper.find('td:eq(2) .progress').css('width', 0).hide(); this.fileProgressWrapper.find('button').hide(); this.fileProgressWrapper.next('.chunk-status-tr').hide(); }; FileProgress.prototype.setCancelled = function(manual) { var progressContainer = 'progressContainer'; if (!manual) { progressContainer += ' red'; } this.fileProgressWrapper.attr('class', progressContainer); this.fileProgressWrapper.find('td .progress .progress-bar-info').css('width', 0); }; FileProgress.prototype.setStatus = function(status, isUploading) { if (!isUploading) { this.fileProgressWrapper.find('.status').text(status).attr('class', 'status text-left'); } }; FileProgress.prototype.appear = function() { if (this.getTimer() !== null) { clearTimeout(this.getTimer()); this.setTimer(null); } if (this.fileProgressWrapper[0].filters) { try { this.fileProgressWrapper[0].filters.item("DXImageTransform.Microsoft.Alpha").opacity = 100; } catch (e) { this.fileProgressWrapper.css('filter', "progid:DXImageTransform.Microsoft.Alpha(opacity=100)"); } } else { this.fileProgressWrapper.css('opacity', 1); } this.fileProgressWrapper.css('height', ''); this.height = this.fileProgressWrapper.offset().top; this.opacity = 100; this.fileProgressWrapper.show(); }; function QiniuJsSDK() { this.detectIEVersion = function() { var v = 4, div = document.createElement('div'), all = div.getElementsByTagName('i'); while ( div.innerHTML = '<!--[if gt IE ' + v + ']><i></i><![endif]-->', all[0] ) { v++; } return v > 4 ? v : false; }; this.isImage = function(url) { var res, suffix = ""; var imageSuffixes = ["png", "jpg", "jpeg", "gif", "bmp"]; var suffixMatch = /\.([a-zA-Z0-9]+)(\?|\@|$)/; if (!url || !suffixMatch.test(url)) { return false; } res = suffixMatch.exec(url); suffix = res[1].toLowerCase(); for (var i = 0, l = imageSuffixes.length; i < l; i++) { if (suffix === imageSuffixes[i]) { return true; } } return false; }; this.getFileExtension = function(filename) { var tempArr = filename.split("."); var ext; if (tempArr.length === 1 || (tempArr[0] === "" && tempArr.length === 2)) { ext = ""; } else { ext = tempArr.pop().toLowerCase(); } return ext; }; this.utf8_encode = function(argString) { if (argString === null || typeof argString === 'undefined') { return ''; } var string = (argString + ''); var utftext = '', start, end, stringl = 0; start = end = 0; stringl = string.length; for (var n = 0; n < stringl; n++) { var c1 = string.charCodeAt(n); var enc = null; if (c1 < 128) { end++; } else if (c1 > 127 && c1 < 2048) { enc = String.fromCharCode( (c1 >> 6) | 192, (c1 & 63) | 128 ); } else if (c1 & 0xF800 ^ 0xD800 > 0) { enc = String.fromCharCode( (c1 >> 12) | 224, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128 ); } else { if (c1 & 0xFC00 ^ 0xD800 > 0) { throw new RangeError('Unmatched trail surrogate at ' + n); } var c2 = string.charCodeAt(++n); if (c2 & 0xFC00 ^ 0xDC00 > 0) { throw new RangeError('Unmatched lead surrogate at ' + (n - 1)); } c1 = ((c1 & 0x3FF) << 10) + (c2 & 0x3FF) + 0x10000; enc = String.fromCharCode( (c1 >> 18) | 240, ((c1 >> 12) & 63) | 128, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128 ); } if (enc !== null) { if (end > start) { utftext += string.slice(start, end); } utftext += enc; start = end = n + 1; } } if (end > start) { utftext += string.slice(start, stringl); } return utftext; }; this.base64_encode = function(data) { var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='; var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = '', tmp_arr = []; if (!data) { return data; } data = this.utf8_encode(data + ''); do { o1 = data.charCodeAt(i++); o2 = data.charCodeAt(i++); o3 = data.charCodeAt(i++); bits = o1 << 16 | o2 << 8 | o3; h1 = bits >> 18 & 0x3f; h2 = bits >> 12 & 0x3f; h3 = bits >> 6 & 0x3f; h4 = bits & 0x3f; tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4); } while (i < data.length); enc = tmp_arr.join(''); switch (data.length % 3) { case 1: enc = enc.slice(0, -2) + '=='; break; case 2: enc = enc.slice(0, -1) + '='; break; } return enc; }; this.URLSafeBase64Encode = function(v) { v = this.base64_encode(v); return v.replace(/\//g, '_').replace(/\+/g, '-'); }; this.createAjax = function(argument) { var xmlhttp = {}; if (window.XMLHttpRequest) { xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); } return xmlhttp; }; this.parseJSON = function(data) { if (window.JSON && window.JSON.parse) { return window.JSON.parse(data); } if (data === null) { return data; } if (typeof data === "string") { data = this.trim(data); if (data) { if (/^[\],:{}\s]*$/.test(data.replace(/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, "@").replace(/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) { return (function() { return data; })(); } } } }; this.trim = function(text) { return text === null ? "" : this.trim.call(text); }; var that = this; this.uploader = function(op) { if (!op.domain) { throw 'uptoken_url or domain is required!'; } if (!op.browse_button) { throw 'browse_button is required!'; } var option = {}; var _Error_Handler = op.init && op.init.Error; var _FileUploaded_Handler = op.init && op.init.FileUploaded; op.init.Error = function() {}; op.init.FileUploaded = function() {}; that.uptoken_url = op.uptoken_url; that.token = ''; that.key_handler = typeof op.init.Key === 'function' ? op.init.Key : ''; this.domain = op.domain; var ctx = ''; var reset_chunk_size = function() { var ie = that.detectIEVersion(); var BLOCK_BITS, MAX_CHUNK_SIZE, chunk_size; var isSpecialSafari = (mOxie.Env.browser === "Safari" && mOxie.Env.version <= 5 && mOxie.Env.os === "Windows" && mOxie.Env.osVersion === "7") || (mOxie.Env.browser === "Safari" && mOxie.Env.os === "iOS" && mOxie.Env.osVersion === "7"); if (ie && ie <= 9 && op.chunk_size && op.runtimes.indexOf('flash') >= 0) { op.chunk_size = 0; } else if (isSpecialSafari) { op.chunk_size = 0; } else { BLOCK_BITS = 20; MAX_CHUNK_SIZE = 4 << BLOCK_BITS; chunk_size = plupload.parseSize(op.chunk_size); if (chunk_size > MAX_CHUNK_SIZE) { op.chunk_size = MAX_CHUNK_SIZE; } } }; reset_chunk_size(); var getUpToken = function() { if (!op.uptoken) { var ajax = that.createAjax(); ajax.open('GET', that.uptoken_url, true); ajax.setRequestHeader("If-Modified-Since", "0"); ajax.onreadystatechange = function() { if (ajax.readyState === 4 && ajax.status === 200) { var res = that.parseJSON(ajax.responseText); that.token = res.uptoken; } }; ajax.send(); } else { that.token = op.uptoken; } }; var getFileKey = function(up, file, func) { var key = '', unique_names = false; if (!op.save_key) { unique_names = up.getOption && up.getOption('unique_names'); unique_names = unique_names || (up.settings && up.settings.unique_names); if (unique_names) { var ext = that.getFileExtension(file.name); key = ext ? file.id + '.' + ext : file.id; } else if (typeof func === 'function') { key = func(up, file); } else { key = file.name; } } return key; }; plupload.extend(option, op, { url: 'http://up.qiniu.com', multipart_params: { token: '' } }); var uploader = new plupload.Uploader(option); uploader.bind('Init', function(up, params) { getUpToken(); }); uploader.init(); uploader.bind('FilesAdded', function(up, files) { var auto_start = up.getOption && up.getOption('auto_start'); auto_start = auto_start || (up.settings && up.settings.auto_start); if (auto_start) { plupload.each(files, function(i, file) { up.start(); }); } up.refresh(); }); uploader.bind('BeforeUpload', function(up, file) { ctx = ''; var directUpload = function(up, file, func) { var multipart_params_obj; if (op.save_key) { multipart_params_obj = { 'token': that.token }; } else { multipart_params_obj = { 'key': getFileKey(up, file, func), 'token': that.token }; } var x_vars = op.x_vars; if (x_vars !== undefined && typeof x_vars === 'object') { for (var x_key in x_vars) { if (x_vars.hasOwnProperty(x_key)) { if (typeof x_vars[x_key] === 'function') { multipart_params_obj['x:' + x_key] = x_vars[x_key](up, file); } else if (typeof x_vars[x_key] !== 'object') { multipart_params_obj['x:' + x_key] = x_vars[x_key]; } } } } up.setOption({ 'url': 'http://upload.qiniu.com/', 'multipart': true, 'chunk_size': undefined, 'multipart_params': multipart_params_obj }); }; var chunk_size = up.getOption && up.getOption('chunk_size'); chunk_size = chunk_size || (up.settings && up.settings.chunk_size); if (uploader.runtime === 'html5' && chunk_size) { if (file.size < chunk_size) { directUpload(up, file, that.key_handler); } else { var localFileInfo = localStorage.getItem(file.name); var blockSize = chunk_size; if (localFileInfo) { localFileInfo = JSON.parse(localFileInfo); var now = (new Date()).getTime(); var before = localFileInfo.time || 0; var aDay = 24 * 60 * 60 * 1000; if (now - before < aDay) { if (localFileInfo.percent !== 100) { if (file.size === localFileInfo.total) { file.percent = localFileInfo.percent; file.loaded = localFileInfo.offset; ctx = localFileInfo.ctx; if (localFileInfo.offset + blockSize > file.size) { blockSize = file.size - localFileInfo.offset; } } else { localStorage.removeItem(file.name); } } else { localStorage.removeItem(file.name); } } else { localStorage.removeItem(file.name); } } up.setOption({ 'url': 'http://upload.qiniu.com/mkblk/' + blockSize, 'multipart': false, 'chunk_size': chunk_size, 'required_features': "chunks", 'headers': { 'Authorization': 'UpToken ' + that.token }, 'multipart_params': {} }); } } else { directUpload(up, file, that.key_handler); } }); uploader.bind('ChunkUploaded', function(up, file, info) { var res = that.parseJSON(info.response); ctx = ctx ? ctx + ',' + res.ctx : res.ctx; var leftSize = info.total - info.offset; var chunk_size = up.getOption && up.getOption('chunk_size'); chunk_size = chunk_size || (up.settings && up.settings.chunk_size); if (leftSize < chunk_size) { up.setOption({ 'url': 'http://upload.qiniu.com/mkblk/' + leftSize }); } localStorage.setItem(file.name, JSON.stringify({ ctx: ctx, percent: file.percent, total: info.total, offset: info.offset, time: (new Date()).getTime() })); }); uploader.bind('Error', (function(_Error_Handler) { return function(up, err) { var errTip = ''; var file = err.file; if (file) { switch (err.code) { case plupload.FAILED: errTip = '上传失败。请稍后再试。'; break; case plupload.FILE_SIZE_ERROR: var max_file_size = up.getOption && up.getOption('max_file_size'); max_file_size = max_file_size || (up.settings && up.settings.max_file_size); errTip = '浏览器最大可上传' + max_file_size + '。更大文件请使用命令行工具。'; break; case plupload.FILE_EXTENSION_ERROR: errTip = '文件验证失败。请稍后重试。'; break; case plupload.HTTP_ERROR: var errorObj = that.parseJSON(err.response); var errorText = errorObj.error; switch (err.status) { case 400: errTip = "请求报文格式错误。"; break; case 401: errTip = "客户端认证授权失败。请重试或提交反馈。"; break; case 405: errTip = "客户端请求错误。请重试或提交反馈。"; break; case 579: errTip = "资源上传成功，但回调失败。"; break; case 599: errTip = "网络连接异常。请重试或提交反馈。"; break; case 614: errTip = "文件已存在。"; try { errorObj = that.parseJSON(errorObj.error); errorText = errorObj.error || 'file exists'; } catch (e) { errorText = errorObj.error || 'file exists'; } break; case 631: errTip = "指定空间不存在。"; break; case 701: errTip = "上传数据块校验出错。请重试或提交反馈。"; break; default: errTip = "未知错误。"; break; } errTip = errTip + '(' + err.status + '：' + errorText + ')'; break; case plupload.SECURITY_ERROR: errTip = '安全配置错误。请联系网站管理员。'; break; case plupload.GENERIC_ERROR: errTip = '上传失败。请稍后再试。'; break; case plupload.IO_ERROR: errTip = '上传失败。请稍后再试。'; break; case plupload.INIT_ERROR: errTip = '网站配置错误。请联系网站管理员。'; uploader.destroy(); break; default: errTip = err.message + err.details; break; } if (_Error_Handler) { _Error_Handler(up, err, errTip); } } up.refresh(); }; })(_Error_Handler)); uploader.bind('FileUploaded', (function(_FileUploaded_Handler) { return function(up, file, info) { var last_step = function(up, file, info) { if (op.downtoken_url) { var ajax_downtoken = that.createAjax(); ajax_downtoken.open('POST', op.downtoken_url, true); ajax_downtoken.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'); ajax_downtoken.onreadystatechange = function() { if (ajax_downtoken.readyState === 4) { if (ajax_downtoken.status === 200) { var res_downtoken; try { res_downtoken = that.parseJSON(ajax_downtoken.responseText); } catch (e) { throw ('invalid json format'); } var info_extended = {}; plupload.extend(info_extended, that.parseJSON(info), res_downtoken); if (_FileUploaded_Handler) { _FileUploaded_Handler(up, file, JSON.stringify(info_extended)); } } else { uploader.trigger('Error', { status: ajax_downtoken.status, response: ajax_downtoken.responseText, file: file, code: plupload.HTTP_ERROR }); } } }; ajax_downtoken.send('key=' + that.parseJSON(info).key + '&domain=' + op.domain); } else if (_FileUploaded_Handler) { _FileUploaded_Handler(up, file, info); } }; var res = that.parseJSON(info.response); ctx = ctx ? ctx : res.ctx; if (ctx) { var key = ''; if (!op.save_key) { key = getFileKey(up, file, that.key_handler); key = key ? '/key/' + that.URLSafeBase64Encode(key) : ''; } var x_vars = op.x_vars, x_val = '', x_vars_url = ''; if (x_vars !== undefined && typeof x_vars === 'object') { for (var x_key in x_vars) { if (x_vars.hasOwnProperty(x_key)) { if (typeof x_vars[x_key] === 'function') { x_val = that.URLSafeBase64Encode(x_vars[x_key](up, file)); } else if (typeof x_vars[x_key] !== 'object') { x_val = that.URLSafeBase64Encode(x_vars[x_key]); } x_vars_url += '/x:' + x_key + '/' + x_val; } } } var url = 'http://upload.qiniu.com/mkfile/' + file.size + key + x_vars_url; var ajax = that.createAjax(); ajax.open('POST', url, true); ajax.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8'); ajax.setRequestHeader('Authorization', 'UpToken ' + that.token); ajax.onreadystatechange = function() { if (ajax.readyState === 4) { localStorage.removeItem(file.name); if (ajax.status === 200) { var info = ajax.responseText; last_step(up, file, info); } else { uploader.trigger('Error', { status: ajax.status, response: ajax.responseText, file: file, code: -200 }); } } }; ajax.send(ctx); } else { last_step(up, file, info.response); } }; })(_FileUploaded_Handler)); return uploader; }; this.getUrl = function(key) { if (!key) { return false; } key = encodeURI(key); var domain = this.domain; if (domain.slice(domain.length - 1) !== '/') { domain = domain + '/'; } return domain + key; }; this.imageView2 = function(op, key) { var mode = op.mode || '', w = op.w || '', h = op.h || '', q = op.quality || '', format = op.format || ''; if (!mode) { return false; } if (!w && !h) { return false; } var imageUrl = 'imageView2/' + mode; imageUrl += w ? '/w/' + w : ''; imageUrl += h ? '/h/' + h : ''; imageUrl += q ? '/q/' + q : ''; imageUrl += format ? '/format/' + format : ''; if (key) { imageUrl = this.getUrl(key) + '?' + imageUrl; } return imageUrl; }; this.imageMogr2 = function(op, key) { var auto_orient = op['auto-orient'] || '', thumbnail = op.thumbnail || '', strip = op.strip || '', gravity = op.gravity || '', crop = op.crop || '', quality = op.quality || '', rotate = op.rotate || '', format = op.format || '', blur = op.blur || ''; var imageUrl = 'imageMogr2'; imageUrl += auto_orient ? '/auto-orient' : ''; imageUrl += thumbnail ? '/thumbnail/' + thumbnail : ''; imageUrl += strip ? '/strip' : ''; imageUrl += gravity ? '/gravity/' + gravity : ''; imageUrl += quality ? '/quality/' + quality : ''; imageUrl += crop ? '/crop/' + crop : ''; imageUrl += rotate ? '/rotate/' + rotate : ''; imageUrl += format ? '/format/' + format : ''; imageUrl += blur ? '/blur/' + blur : ''; if (key) { imageUrl = this.getUrl(key) + '?' + imageUrl; } return imageUrl; }; this.watermark = function(op, key) { var mode = op.mode; if (!mode) { return false; } var imageUrl = 'watermark/' + mode; if (mode === 1) { var image = op.image || ''; if (!image) { return false; } imageUrl += image ? '/image/' + this.URLSafeBase64Encode(image) : ''; } else if (mode === 2) { var text = op.text ? op.text : '', font = op.font ? op.font : '', fontsize = op.fontsize ? op.fontsize : '', fill = op.fill ? op.fill : ''; if (!text) { return false; } imageUrl += text ? '/text/' + this.URLSafeBase64Encode(text) : ''; imageUrl += font ? '/font/' + this.URLSafeBase64Encode(font) : ''; imageUrl += fontsize ? '/fontsize/' + fontsize : ''; imageUrl += fill ? '/fill/' + this.URLSafeBase64Encode(fill) : ''; } else { return false; } var dissolve = op.dissolve || '', gravity = op.gravity || '', dx = op.dx || '', dy = op.dy || ''; imageUrl += dissolve ? '/dissolve/' + dissolve : ''; imageUrl += gravity ? '/gravity/' + gravity : ''; imageUrl += dx ? '/dx/' + dx : ''; imageUrl += dy ? '/dy/' + dy : ''; if (key) { imageUrl = this.getUrl(key) + '?' + imageUrl; } return imageUrl; }; this.imageInfo = function(key) { if (!key) { return false; } var url = this.getUrl(key) + '?imageInfo'; var xhr = this.createAjax(); var info; var that = this; xhr.open('GET', url, false); xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { info = that.parseJSON(xhr.responseText); } }; xhr.send(); return info; }; this.exif = function(key) { if (!key) { return false; } var url = this.getUrl(key) + '?exif'; var xhr = this.createAjax(); var info; var that = this; xhr.open('GET', url, false); xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { info = that.parseJSON(xhr.responseText); } }; xhr.send(); return info; }; this.get = function(type, key) { if (!key || !type) { return false; } if (type === 'exif') { return this.exif(key); } else if (type === 'imageInfo') { return this.imageInfo(key); } return false; }; this.pipeline = function(arr, key) { var isArray = Object.prototype.toString.call(arr) === '[object Array]'; var option, errOp, imageUrl = ''; if (isArray) { for (var i = 0, len = arr.length; i < len; i++) { option = arr[i]; if (!option.fop) { return false; } switch (option.fop) { case 'watermark': imageUrl += this.watermark(option) + '|'; break; case 'imageView2': imageUrl += this.imageView2(option) + '|'; break; case 'imageMogr2': imageUrl += this.imageMogr2(option) + '|'; break; default: errOp = true; break; } if (errOp) { return false; } } if (key) { imageUrl = this.getUrl(key) + '?' + imageUrl; var length = imageUrl.length; if (imageUrl.slice(length - 1) === '|') { imageUrl = imageUrl.slice(0, length - 1); } } return imageUrl; } return false; }; } var UploadUtils = function(){ var uploaderQiNiu = function(options){ var settings = { token:'', domain:'', bucket:'', typebucket:'', iscover:false, container:'upcontainer', browse_button:'uppickfiles', drop_element:'upcontainer', multi_selection:'', auto_start:true, picname:'', fileNumLimit:10, imgw:750, imgh:1000, startload:null, endload:null, callback:null, bcallback:null, previewback:null, upbtnback:null, selectFileAfer:null }; if(options){ $.extend(true,settings,options); } var imgListArr = []; var sets = { runtimes: 'html5,flash,html4', browse_button: settings.browse_button, uptoken : settings.token, unique_names: false, domain: settings.domain, multi_selection:settings.multi_selection, bucket:settings.bucket, container: settings.container, resize : {width :settings.imgw, height : settings.imgh, quality : 100}, filters : [ {title : "Image files", extensions : "jpg,gif,png,jpeg"} ], max_file_size: '5mb', flash_swf_url: 'js/comm/plupload/Moxie.swf', max_retries: 1, dragdrop: true, drop_element: settings.container, chunk_size: '4mb', auto_start: settings.auto_start, init: { 'FilesAdded': function(up, files) { if(settings.typebucket == 2 && settings.typebucket == 2){ $.each(up.files, function (i, file) { if (up.files.length <= 1) { return; } up.removeFile(file); }); if(options.previewback){ previewImage(files[0],function(opt){ settings.previewback(function(){uploader2.start()},opt); }); } }else{ plupload.each(files, function(file) { if(settings.auto_start == false && settings.typebucket == 4){ previewImage(file,function(imgsrc){ $("#uploadTable").append("<li id='"+file.id+"tr'><img src='"+imgsrc+"' /><button type='button' id='"+file.id+"btn' class='del_file_btn btn btn-s' data-id='"+file.id+"'>删除</button><span id='"+file.id+"_progress'></span></li>"); $(".del_file_btn").unbind("click").bind("click",function(){ var thisId = $(this).attr("data-id"); uploader4.removeFile(thisId); $("#"+thisId+"tr").remove(); }); if(options.selectFileAfer){ settings.selectFileAfer(); } }); } var progress = new FileProgress(file, 'fsUploadProgress'); progress.setStatus("等待..."); }); if(settings.auto_start == false && options.upbtnback){ settings.upbtnback(function(){uploader4.start()}); } } if(settings.multi_selection==true){ if(uploader.files.length>settings.fileNumLimit){ uploader.splice(settings.fileNumLimit,999); } } }, 'BeforeUpload': function(up, file) { var progress = new FileProgress(file, 'fsUploadProgress'); var chunk_size = plupload.parseSize(this.getOption('chunk_size')); if (up.runtime === 'html5' && chunk_size) { progress.setChunkProgess(chunk_size); } if(!settings.tip){ if(options.startload){ settings.startload(); }else{ AjaxFunUtils.ajaxInit({url: '/common/gettpl.html?name=progress&ch=sns', type: "GET", yzlogin:true, isloading:true, dataType: 'html', params: '', callback: function(data){ $("body").append(data); config.tip.centerDiv({divId:"dzuploadid",type:1}); } }); } } }, 'UploadProgress': function(up, file) { var progress = new FileProgress(file, 'fsUploadProgress'); var chunk_size = plupload.parseSize(this.getOption('chunk_size')); progress.setProgress(file.percent + "%", up.total.bytesPerSec, chunk_size); if(settings.tip){ $("#progress").find(".text").html(file.percent + "%"); $("#progress").find(".percentage").css({"width":file.percent+"%"}); $("#tipclose").hide(); }else{ $("#progress").find(".text").html(file.percent + "%"); $("#progress").find(".percentage").css({"width":file.percent+"%"}); } }, 'FileUploaded': function(up, file, info) { if(!settings.tip){ if(options.endload){ settings.endload(); }else{ var num = $('#dzuploadid').attr("data-index"); config.tip.centerDivClosed({indexTipDiv:$('#dzuploadid'),type:1,indexNum:num}); } } var res = $.parseJSON(info); if(settings.typebucket == 2){ var imageInfoObj = avatarUp.imageInfo(res.key); }else if(settings.typebucket == 3){ var imageInfoObj = {}; }else if(settings.typebucket == 4){ var imageInfoObj = needUp.imageInfo(res.key); }else{ var imageInfoObj = shareUp.imageInfo(res.key); } var new_w = imageInfoObj.width; var new_h = imageInfoObj.height; if(imageInfoObj.orientation == 'Right-top' || imageInfoObj.orientation == 'Left-bottom'){ new_w = imageInfoObj.height; new_h = imageInfoObj.width; } imageInfoObj.width = new_w; imageInfoObj.height = new_h; if(settings.isarray){ var biliimg = new_w/236; res.key = "/"+ res.key; res.src = settings.domain + "/" + res.key+"?imageMogr2/auto-orient"; res.swidth = parseInt(new_w/biliimg); res.sheight = parseInt(new_h/biliimg); imageInfoObj.width = new_w; imageInfoObj.height = new_h; var res_new = $.extend(true,res,imageInfoObj); imgListArr.push(res_new); }else{ var res_new = $.extend(true,res,imageInfoObj); imgListArr = res_new; } if(options.bcallback){ settings.bcallback(res,settings.domain); } }, 'Error': function(up, err, errTip) { if(options.errorcallback){ settings.errorcallback(up, err, errTip); }else{ config.tip.tips({ htmlmsg:'<div style="padding:30px">'+errTip+'</div>', type:0, scallback:function(){ var num = $('#dzuploadid').attr("data-index"); config.tip.centerDivClosed({indexTipDiv:$('#dzuploadid'),type:1,indexNum:num}); } }); } }, 'UploadComplete': function() { if(options.callback){ settings.callback(imgListArr,settings.domain); } if(settings.tip){ closeUpload(); } }, 'Key': function(up, file) { var d = new Date(); var vYear = d.getFullYear(); var vMon = d.getMonth() + 1; var vDay = d.getDate(); var h = d.getHours(); var m = d.getMinutes(); var s = d.getSeconds(); if(h<=9){ h = "0"+h; } if(m<=9){ m = "0"+m; } if(s<=9){ s = "0"+s; } if(vMon<=9){ vMon = "0"+vMon; } if(vDay<=9){ vDay = "0"+vDay; } var datatime = vYear+""+vMon+""+vDay; var randomNum = String(Math.floor(Math.random()*100000000+1)); if(randomNum.length < 4){ randomNum = randomNum + "0000"; } randomNum = randomNum.substr(0,4); var key = datatime + "/"+suid+"/"+h+""+m+""+s+""+randomNum+".jpg"; if(settings.iscover == true){ key = settings.picname; } return key } } }; if(settings.typebucket == 2){ var avatarUp = new QiniuJsSDK(); var uploader2 = avatarUp.uploader(sets); }else if(settings.typebucket == 3){ var rzpicUp = new QiniuJsSDK(); var uploader3 = rzpicUp.uploader(sets); }else if(settings.typebucket == 4){ var needUp = new QiniuJsSDK(); var uploader4 = needUp.uploader(sets); }else{ var shareUp = new QiniuJsSDK(); var uploader = shareUp.uploader(sets); } }; var previewImage = function(file,callback){ if(!file || !/image\//.test(file.type)) return; if(file.type=='image/gif'){ var fr = new mOxie.FileReader(); fr.onload = function(){ callback(fr.result); fr.destroy(); fr = null; }; fr.readAsDataURL(file.getSource()); }else{ var preloader = new mOxie.Image(); preloader.onload = function() { var bodyH = config.base.getHeightBody(); var f_h = $("#footerbox").height(); var a_h = $("#avatar_up_cmm").height(); var headerbox_h = $("#headerbox").height(); var divH = bodyH -f_h - a_h - headerbox_h; var bodyW = config.base.getWidthBody(); var defW = thisW = preloader.width; var defH = thisH = preloader.height; var imgbili = thisW/thisH; if(bodyW >= 750){ bodyW = 750; } if(imgbili<=1){ thisH = divH; thisW = thisH*imgbili; }else{ thisW = bodyW; thisH = thisW/imgbili; }; preloader.downsize( thisW, thisH ); var imgsrc = preloader.type=='image/jpeg' ? preloader.getAsDataURL('image/jpeg',80) : preloader.getAsDataURL(); var settings = { imgsrc:imgsrc, bili:imgbili, w:thisW, h:thisH, dfw:defW, dfh:defH }; callback && callback(settings); preloader.destroy(); preloader = null; }; preloader.load( file.getSource() ); } }; var uploadInit = function(options){ var settings = { yzlogin:true, bucket:'share', typebucket:'', container:'upcontainer', browse_button:'uppickfiles', drop_element:'upcontainer', multi_selection:true, auto_start:true, picname:'', tip:false, isarray:false, imgw:736, imgh:1000, startcallback:function(){}, callback:function(){}, bcallback:function(){} }; if(options){ $.extend(settings,options); } if(settings.yzlogin){ var loginflag = BaseInitClass.loginCheck(1); if(!loginflag){ $("#up_input").hide(); $("#upcontainer").unbind("click").bind("click",function(){ BaseInitClass.loginCheck(); }); return false; }else if(settings.tip){ allUp(); return true; }else{ $("#up_input").show(); getuptoken(); } }else{ allUp(); return true; } function allUp(){ AjaxFunUtils.ajaxInit({url: "/common/gettpl.html?name=uppic&ch=sns", type: "GET", yzlogin:true, isloading:true, dataType: 'html', params: '', callback: function(data){ $("body").append(data); $("#uppic_title").html(settings.uptitle); config.tip.centerDiv({ divId:"uploadid", type:1, callback:function(){ getuptoken(); }, closeback:function(){ }}); } }) } function getuptoken(){ AjaxFunUtils.ajaxInit({ "url":"/qiniu/uptoken.html", "params":{bucket:settings.bucket,picname:settings.picname}, "callback":function (res) { if(res.status == 1){ if(options.startcallback){ settings.startcallback(res); } settings.token=res.data.token; settings.domain=res.data.domain; settings.bucket=res.data.bucket; uploaderQiNiu(settings); } } }); } }; var successFun = function(oarrData,options){ var settings= { share:'up', isOri:'true', boradid:'', fileNumLimit:10, ismjx:0 }; if(options){ $.extend(true,settings,options); } ShareUtils.addShareInit(oarrData,{share:settings.share,isOri:settings.isOri,boradid:settings.boradid,ismjx:settings.ismjx}); }; return {uploadInit:uploadInit,successFun:successFun,uploaderQiNiu:uploaderQiNiu} }(); 