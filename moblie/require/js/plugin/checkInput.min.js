;(function (factory) {
    if (typeof define === "function" && define.amd) {
        // AMD模式
        define([ "jquery" ], factory);
    } else {
        // 全局模式
        factory(jQuery);
    }
}(function ($) {
	var checkInputFun = {
		validatetype:0,
		myIt:{},
		regulars: {
			"email": [/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2})$/, ''],
			"password": [/^[\@A-Za-z0-9\!\#\$\%\^\&\*\.\~]{6,22}$/, ''],
			"mobile": [/^((134[0-8]{1})|(13[0,1,2,3,5,6,7,8,9]\d)|(15[0,1,2,3,5,6,7,8,9]\d)|(17[0|1|2|3|(5-9)]\d)|(18[0|1|2|3|(5-9)]\d)|(14[5,7]\d))\d{7}$/, ''],
			"code": [/^[A-Za-z0-9]{4}$/, ''],
			"money" : [/^\d+(\.\d{1,2})?$/,''],
			//"money" : [/^(?!(0[0-9]{0,}$))[0-9]{1,}[.]{0,}[0-9]{0,}$/,lang.js_base_money],
			"moneyandempty" : [/^(?:(?!0)\d*|0|\s*)(?:\.\d+)?$/,''],
			"num" : [/^(\d+){1,13}$/,''],
			"everyone": [/^(\w+)$/,''],
			"mailmoblie":[/^(1[34578]\d{9})|(([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2}))$/,'']
		},
		inputs:{
			"isempty":{isempty: [0],focusMsg: '',rightMsg: "",errorMsg:'valid'},
			"Email":{type: "email",focusMsg: '',rightMsg: ""},
			"Pwd":{type: 'password',focusMsg: '',rightMsg: ""}, 
			"Pwd1":{type: 'eq',focusMsg: '',rightMsg: "",errorMsg: "",eqto: 'Pwd'},
			"Code":{type: "code",focusMsg: '',rightMsg: ""},
			"Money":{type: "money",focusMsg: '',rightMsg: ""},
			"moneyandempty":{type: "moneyandempty",focusMsg: '',rightMsg: ""},
			"num":{type: "num",focusMsg: '',rightMsg: ""},
			"Mobile":{type: "mobile",focusMsg: '',rightMsg: ""},
			"mailmoblie":{type: "mailmoblie",focusMsg: '',rightMsg: ""}
		},
		tipStatu: function (type, inp, msg) {
			if(inp.data("tip")){
				if(checkInputFun.validatetype == 0){
					inp.removeClass('right_validate error_validate').addClass(type + "_validate");	
					inp.parents(".validatebox").removeClass('right_validate error_validate').addClass(type + "_validate");
				}else{
					inp.data("tip").removeClass("focus_tip right_tip error_tip ajax_checking_tip").addClass(type + "_tip").html(msg ? msg : "").css({
							"top": -2,
							"right":5
						});
				}
			}
		},
		/*相等匹配*/
		checkEq: function (set, inp, thiz) {
			if (set.type == "eq" && set.eqto) {
				if (inp.val() !== "" && (inp.val() == inp.parents("form").find("[data-validate='" + set.eqto + "']").val())) {
					checkInputFun.tipStatu("right", inp, set.rightMsg);
					return true;
				} else {
					checkInputFun.tipStatu("error", inp, set.errorMsg);
					return false;
				}
			} else { return true; }
		},
		/*是否为空检查*/
		isempty: function (set, inp) {
			var vlen = inp.val().length;
			if (set.isempty) {
				if (vlen > 0) {
					checkInputFun.tipStatu("right", inp, set.rightMsg);
					return true;
				} else {
					checkInputFun.tipStatu("error", inp, set.errorMsg);
					return false;
				}
			} else {
				return true;
			}
	
		},
		/*length检查*/
		checkLength: function (set, inp) {
			var vlen = inp.val().length;
			if (set.length) {
				var len = set.length;
				if (vlen >= set.length[0] && vlen <= set.length[1]) {
					checkInputFun.tipStatu("right", inp, set.rightMsg);
					return true;
				} else {
					checkInputFun.tipStatu("error", inp, set.errorMsg);
					return false;
				}
			} else { return true; }
		},
		/*between检查*/
		checkBet: function (set, inp) {
			if (set.between) {
				var bet = set.between;
				if (inp.val() >= set.between[0] && inp.val() <= set.between[1]) {
					checkInputFun.tipStatu("right", inp, set.rightMsg);
					return true;
				} else {
					checkInputFun.tipStatu("error", inp, set.errorMsg);
					return false;
				}
			} else { return true; }
		},
		/*正则匹配*/
		checkReg: function (set, inp,callback,mycallback) {
			if (checkInputFun.regulars[set.type]) {
				if(set.type=='mailmoblie'){
					var reg = checkInputFun.regulars['email'];
				}else{
					var reg = checkInputFun.regulars[set.type];
				}
				if (reg[0].test(inp.val())) {
					$(inp).removeClass("err_border");
					checkInputFun.tipStatu("right", inp, set.rightMsg);
					if (mycallback) {
					   mycallback(); 
					}
					return true;
				} else {
					if(set.type=='mailmoblie'){
						var reg = checkInputFun.regulars['mobile'];
						if (reg[0].test(inp.val())) {
							$(inp).removeClass("err_border");
							checkInputFun.tipStatu("right", inp, set.rightMsg);
							if (mycallback) {
							   mycallback(); 
							}
							return true;
						} 
					}
					$(inp).addClass("err_border");
					checkInputFun.tipStatu("error", inp, reg[1]);
					return false;
				}
			} else { return true; }
		},
		/*检查ajax参数验证*/
		ajaxCheck: function (set, inp,callback) {
			if (set.ajaxCheck) {
				var ajaxCheck = set.ajaxCheck,result = false;
				for(var i in ajaxCheck.data){
					ajaxCheck.data[i] = $("#" + i).val();	
				}
				$.ajax({
					url: ajaxCheck.url,
					type: "post",
					dataType: 'json',
					timeout:5000,
					async:false,
					data: ajaxCheck.data,
					success: function (d) {
						if (d.status == 1) {
							if (callback) {
								callback();
							}
							checkInputFun.tipStatu("right", inp, d.Msg);
							result = true;
						}
						else if (d.State == 0) {
							checkInputFun.tipStatu("error", inp, d.Msg);
							result = false;
						}else {
							result = false;
						}
					},
					error: function () {
						checkInputFun.tipStatu("error", inp, "Network Error");
						result = false;
					}
				});
				return result;
			} else {
				return true;
			}
		},
		/*初始化（每个input的）验证环境*/
		initContext: function (inp, it) {
			if (!inp.data("tip") && inp.attr("data-validate") && it[inp.attr("data-validate")]) {
				var tip = $("<p class='input_tip'></p>");
				inp.data("tip", tip).data("set", it[inp.attr("data-validate")]);
				inp.after(tip);
			}
		},
		/*检查输入*/
		mycheckIn: function (inp, form, callback, mycallback) {
			if (inp.data("tip")) {
				var set = inp.data("set");
				return (checkInputFun.checkReg(set, inp, callback, mycallback) && checkInputFun.checkEq(set, inp, form) && checkInputFun.checkBet(set, inp) && checkInputFun.checkLength(set, inp) && checkInputFun.ajaxCheck(set, inp, callback)&& checkInputFun.isempty(set, inp));
			} else {
				return true;
			}
		},
		/*检查输入*/
		smycheckIn: function (inp, form, callback, mycallback) {
			if (inp.data("tip")) {
				var set = inp.data("set");
				return (checkInputFun.checkReg(set, inp, callback, mycallback) && checkInputFun.checkEq(set, inp, form) && checkInputFun.checkBet(set, inp) && checkInputFun.checkLength(set, inp)&& checkInputFun.isempty(set, inp));
			} else {
				return true;
			}
		}
		
	};
    $.fn.checkInput = function (settings) {
		if (!settings.inputs) {
			settings.inputs = checkInputFun.inputs;
		};
		var dfs = {
			validatetype:0,
			inputs: {},
			regulars: {},
			button: "",
			buttonDiv: "",
			onButtonClick: $.noop,
			beforeSubmit: $.noop,
			submitBtnFn: $.noop,
			mycallback: $.noop,
			checkAll: $.noop
		};
		var sets = $.extend(true, dfs, settings);
		checkInputFun.inputs = $.extend(true, checkInputFun.inputs, sets.inputs);
		var it = checkInputFun.inputs;
		checkInputFun.validatetype = sets.validatetype;
		checkInputFun.myIt = it ;
		checkInputFun.regulars = $.extend(true, checkInputFun.regulars, sets.regulars);
		var thiz = $(this);
		/*失焦提示*/
		this.undelegate("input,textarea,select", "blur").delegate("input,textarea,select", "blur", function () {
			var isCallback = $(this).attr('data-callback');
			var myismust = $(this).attr('data-ismust');
			var myVal = $(this).val();
			if(!myismust || myVal!=''){
				if (isCallback == 1) {
					checkInputFun.mycheckIn($(this), thiz,'',sets.mycallback);	
				}else{
					checkInputFun.mycheckIn($(this), thiz);
				}	
			}else{
				$(this).data("tip").hide();	
			}
			checkInputFun.inputs;
		});
	
		/*聚焦提示*/
		this.undelegate("input,textarea,select", "focus").delegate("input,textarea,select", "focus", function () {
			checkInputFun.initContext($(this), it);
			$(this).siblings(".input_tip").show();
			var set = $(this).data("set");
			if ($(this).data("tip") && set.focusMsg) {
				checkInputFun.tipStatu("focus", $(this), set.focusMsg);
			}
			
		});
	
		/*提交表单*/
		this.submit(function (e) {
			var result = true;
			var form = $(e.target);
			$.each(form.find("input,textarea,select"), function (i, n) {
				var myismust = $(this).attr('data-ismust');
				var myVal = $(this).val();
				if(!myismust || myVal!=''){
					checkInputFun.initContext($(n), it);
					$(n).siblings(".input_tip").show();
					result = (checkInputFun.smycheckIn($(n), thiz) && result);	
				}
				
			});
			if (result) {
				e.preventDefault();
				sets.submitBtnFn(thiz);
				return false;
			} else {
				e.preventDefault();
				sets.beforeSubmit(e, result, form);
				return false;
			}
		});
		/*如果指定了一个响应事件的元素，则在该元素被点击时执行此方法*/
		if (sets.button) {
			this.find(sets.button).unbind("click").bind("click", function (e) {
				var $mythis = $(this);
				var result = true;
				var form = $(e.target);
				$.each(thiz.find("input,textarea,select"), function (i, n) {
					var myismust = $(this).attr('data-ismust');
					var myVal = $(this).val();
					if(!myismust || myVal!=''){
						checkInputFun.initContext($(n), it);
						$(n).siblings(".input_tip").show();
						result = (checkInputFun.smycheckIn($(n), thiz) && result);	
					};
					
				});
				if (result) {
					e.preventDefault();
	
					sets.submitBtnFn(thiz,$mythis);
					return false;
				} else {
					e.preventDefault();
					sets.beforeSubmit(e, result, form);
					return false;
				};        });
		};
		/*如果指定了一个不是From的响应事件的元素则在该元素被点击时执行此方法*/
		if (sets.buttonDiv) {
			$("body").delegate(sets.buttonDiv, "click", function (e) {
				var result = true;
				var form = $(e.target);
				$.each(thiz.find("input,textarea,select"), function (i, n) {
					var myismust = $(this).attr('data-ismust');
					var myVal = $(this).val();
					if(!myismust || myVal!=''){
						checkInputFun.initContext($(n), it);
						$(n).siblings(".input_tip").show();
						result = (checkInputFun.smycheckIn($(n), thiz) && result);	
					};
					
				});
				if (result) {
					e.preventDefault();
					sets.submitBtnFn(thiz);
					return false;
				} else {
					e.preventDefault();
					sets.beforeSubmit(e, result, form);
					return false;
				};
			});
		};
	
		return this;
	};
}));